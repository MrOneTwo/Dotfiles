source "%val{config}/plugins/plug.kak/rc/plug.kak"

# Install this to get readtags
# Void Linux, install: automake
# https://github.com/universal-ctags/ctags
#
# - ${...} - command expansion (using the same commands as when you do :command)
# - evaluate-commands - evaluates its given paramets as if they were entered in the command prompt
# - execute-keys - runs keys as if they were pressed

set global tabstop     2
set global indentwidth 2

# The termcmd is option of the x11 module.
# See x11.kak to see its options.
hook global ModuleLoaded x11 %{
    # You can print this variable with :echo %opt{termcmd}
    # In the shell expansion (%sh{...}) you refer to this option with kak_opt_termcmd.
    # https://github.com/mawww/kakoune/blob/master/doc/pages/expansions.asciidoc
    # Override the termcmd, created in the rc/windowing/x11.kak. Be sure not to put flags
    # after `-x` because it'll treat those like a command to execute. This overrides all
    # termcmd uses - not good. I'd like it to be only for fzf.
    set-option global termcmd "sakura -c 80 -r 60 --class=floater -x"
}

define-command -hidden -params 1.. bspwm-new-impl %{
  # Run a shell script and use the output in the command prompt (because of the evaluate-commands).
  evaluate-commands %sh{
    if [ -z "$kak_opt_termcmd" ]; then
      echo "echo -markup '{Error}termcmd option is not set'"
      exit
    fi
    bspwm_split="$1"
    shift
    # Clone the window with the same buffer, on the same line.
    kakoune_args="-e 'execute-keys $@ :buffer <space> $kak_buffile <ret> $kak_cursor_line g'"
    {
      # echo $kak_opt_termcmd "kak -c $kak_session $kakoune_args" > /tmp/debug
      exec $kak_opt_termcmd "kak -c $kak_session $kakoune_args"
    } < /dev/null > /dev/null 2>&1 &
  }
}

plug "dracula/kakoune" theme
colorscheme dracula

add-highlighter global/ number-lines -hlcursor
add-highlighter global/ column 100 default,rgb:666688
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+b

plug "andreyorst/tagbar.kak" config %{
} defer "tagbar" %{
  set-option global tagbar_sort false
  set-option global tagbar_size 40
  set-option global tagbar_display_anon false
}

# Map the fzf-mode but defer everything else to onModuleLoad fzf hook.
plug "andreyorst/fzf.kak" config %{
  map global normal <c-p> ': fzf-mode<ret>'
} defer "fzf" %{
} defer "fzf-file" %{
  set-option global fzf_preview false
  set-option global fzf_file_command "find . \( -path '*/.svn*' -o \
                                                -path '*/.git*' -o \
                                                -path '*/.cache*' -o \
                                                -path '*/.mypy_cache*' \) -prune -o \
                                                -type f \
                                                -not -name '*.o' \
                                                -print"
}

plug "https://gitlab.com/fsub/kakoune-mark" config %{
}

plug "danr/kakoune-easymotion" config %{
  map global normal <c-e> ':enter-user-mode easymotion<ret>'
}

# Enable editor config.
hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# Column marker.
hook global WinSetOption filetype=(markdown) %{
  # We can't have duplicate highlighters so comment this out since we have a column on 100 in global scope.
  # add-highlighter global/ column 100 default,rgb:666688
  add-highlighter global/ wrap -word -width 100
}

# Highlight the word under the cursor
# -----------------------------------

# Highlight the word under the cursor.
# declare-option -hidden regex curword
set-face global CurWord +bu

# Highlight the words on which the cursor is.
hook global NormalIdle .* %{
  eval -draft %{ try %{
    # \A matches the beginning of a string
    # \z matches the end of a string
    execute-keys ,<a-i>w <a-k>\A\w+\z<ret>
    add-highlighter -override global/curword regex "\b\Q%val{selection}\E\b" 0:CurWord
  } catch %{
    add-highlighter -override global/curword group
  } }
}


# Switch cursor color in insert mode
# ----------------------------------

set-face global InsertCursor default,green+B

hook global ModeChange .*:.*:insert %{
  set-face window PrimaryCursor InsertCursor
  set-face window PrimaryCursorEol InsertCursor
}

hook global ModeChange .*:insert:.* %{ try %{
  unset-face window PrimaryCursor
  unset-face window PrimaryCursorEol
} }

map global normal '#' :comment-line<ret>
# ,y to copy to clipboard. Comma enters user mode.
map global user y '<a-|>xclip -i -selection clipboard<ret>' -docstring "Yank to system clipboard"

plug "https://github.com/alexherbo2/snippets" config %{
}

# Currently ugrep doesn't work probably because of the different
# output format. It would be worth moving the ugrep since its way
# faster.
set-option global grepcmd 'rg --column'

plug "kak-lsp/kak-lsp" do %{
  cargo build --release --locked
  cargo install --force --path .
} config %{

  set global lsp_diagnostic_line_error_sign '║'
  set global lsp_diagnostic_line_warning_sign '┊'

  define-command ne -docstring 'go to next error/warning from lsp' %{ lsp-find-error --include-warnings }
  define-command pe -docstring 'go to previous error/warning from lsp' %{ lsp-find-error --previous --include-warnings }
  define-command ee -docstring 'go to current error/warning from lsp' %{ lsp-find-error --include-warnings; lsp-find-error --previous --include-warnings }

  define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|cc|rust|javascript|typescript) %{
    set-option window lsp_auto_highlight_references true
    set-option window lsp_hover_anchor false
    lsp-auto-hover-enable
    echo -debug "Enabling LSP for filtetype %opt{filetype}"
    lsp-enable-window
  }

  hook global WinSetOption filetype=(rust) %{
    set window lsp_server_configuration rust.clippy_preference="on"
  }

  hook global WinSetOption filetype=rust %{
    hook window BufWritePre .* %{
      evaluate-commands %sh{
        test -f rustfmt.toml && printf lsp-formatting-sync
      }
    }
  }

  hook global KakEnd .* lsp-exit
}
